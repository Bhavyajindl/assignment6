#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};

Node* insertFirst(Node* head, int data) {
    Node* newNode = new Node{data, nullptr, head};
    if (head) head->prev = newNode;
    return newNode;
}

Node* insertLast(Node* head, int data) {
    Node* newNode = new Node{data, nullptr, nullptr};
    if (!head) return newNode;
    Node* temp = head;
    while (temp->next) temp = temp->next;
    temp->next = newNode;
    newNode->prev = temp;
    return head;
}

Node* insertAfter(Node* head, int target, int data) {
    Node* temp = head;
    while (temp && temp->data != target) temp = temp->next;
    if (!temp) {
        cout << "Node " << target << " not found.\n";
        return head;
    }
    Node* newNode = new Node{data, temp, temp->next};
    if (temp->next) temp->next->prev = newNode;
    temp->next = newNode;
    return head;
}

Node* insertBefore(Node* head, int target, int data) {
    Node* temp = head;
    while (temp && temp->data != target) temp = temp->next;
    if (!temp) {
        cout << "Node " << target << " not found.\n";
        return head;
    }
    Node* newNode = new Node{data, temp->prev, temp};
    if (temp->prev) temp->prev->next = newNode;
    else head = newNode;
    temp->prev = newNode;
    return head;
}

Node* deleteNode(Node* head, int target) {
    Node* temp = head;
    while (temp && temp->data != target) temp = temp->next;
    if (!temp) {
        cout << "Node " << target << " not found.\n";
        return head;
    }
    if (temp->prev) temp->prev->next = temp->next;
    else head = temp->next;
    if (temp->next) temp->next->prev = temp->prev;
    delete temp;
    return head;
}

bool searchNode(Node* head, int target) {
    Node* temp = head;
    while (temp) {
        if (temp->data == target) return true;
        temp = temp->next;
    }
    return false;
}

void display(Node* head) {
    Node* temp = head;
    while (temp) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;
    int choice, data, target;

    do {
        cout << "\n--- Doubly Linked List Menu ---\n";
        cout << "1. Insert at first\n2. Insert at last\n3. Insert after a node\n4. Insert before a node\n";
        cout << "5. Delete a node\n6. Search a node\n7. Display list\n0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter data: ";
                cin >> data;
                head = insertFirst(head, data);
                break;
            case 2:
                cout << "Enter data: ";
                cin >> data;
                head = insertLast(head, data);
                break;
            case 3:
                cout << "Enter target node: ";
                cin >> target;
                cout << "Enter data: ";
                cin >> data;
                head = insertAfter(head, target, data);
                break;
            case 4:
                cout << "Enter target node: ";
                cin >> target;
                cout << "Enter data: ";
                cin >> data;
                head = insertBefore(head, target, data);
                break;
            case 5:
                cout << "Enter node to delete: ";
                cin >> target;
                head = deleteNode(head, target);
                break;
            case 6:
                cout << "Enter node to search: ";
                cin >> target;
                if (searchNode(head, target))
                    cout << "Node found.\n";
                else
                    cout << "Node not found.\n";
                break;
            case 7:
                display(head);
                break;
            case 0:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (choice != 0);

    return 0;
}

